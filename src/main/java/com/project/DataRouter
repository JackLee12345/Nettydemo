Connection implements Runnable
客户端与服务端建立连接后，执行 run()
read(){
    mChannel.read(buffer);
    mResponse.doDataBack(buffer);
}

doDataBack(){
    Message message = MessagePack.unpack(buffer);
    MsgRegBean msg = unregister(message.packid); // 发送请求时注册，此时需要设置返回数据，比如拿到 receiver
    msg.receiver.onDataRecv(message);
}

receiver 有各种形式
之一：
    PushCenterManager implements IReceiver // 主推
    onDataRecv(message){
        LinkedBlockingQueue<Message> queue = new LinckedBlockingQueue(100000);
        queue.offer(message);
    }
之二：
    SynReceiver implements IReceiver // 异步
    onDataRecv(message){
        mAnsMessage = data;
        notifyLock() // 释放锁
    }

    QuoteAsyManager.getXxxData(,,,receiver); //异步，请求发送后要等待结果，先lock
    receiver.lock();
        lock(){
            synchronized(object){
                if(mAnsMessage == null){
                    object.wait(30*1000); // 等待3秒
                }
            }
        }
    return (AnsXxx)receiver.getAnsMessage();
之三：
   UpdateRunnable implements Runnable  // 获取当前行情更新的数据，放进任务队列
    run(){
        // 取一个 TaskRunnale
        TaskRunnable taskRunnable = manager.getTaskRunnable();
        UpdateSingleBuffer autopt = AutopushCenter.getInstance().getAutoPushUpdate("name"); // 获取订阅队列，队列中有一个 queue
        getInstance() 中会开启一个线程去拿onDataRecv（message）插入到queue的数据
             QuoteAutoMessgae  msg = mQueue.poll();
           //  QuoteAutoMessage 的数据结构 QuoteAutoMessage[QuoteMessage[DataHead,stream[]],type]
             AnsXxx ansXxx = new AnsXxx(msg.getStream());
             在 AutopushCenter 中有一个List<UpdateSingleBuffer> list
             list.get(i).put(ansXxx);
         realTimeData = autopt.get();
         // 判断 realTimeData 的类型，接着将realTimeData 封装为一个AutoTaskBean对象，并添加到TaskRunnable的队列中
         taskRunnable.addTask(new AutoTaskBean(realTimeData))
         // 实际上是添加到了 CommBlockQueue<AutoTaskBean> queue
         queue.offer(task);
    }
    ---------------------------------------
    --接着将 AutoTaskBean ----> QuoteItem--
    ---------------------------------------
    TaskRunnable implements Runnable  从行情服务器获取最新的数据，封装成主推任务
    // TaskRunnable 中有一个 CommBlockQueue<AutoTaskBean> queue 接上
    run(){
        while(true){
            AutoTaskBean = queue.take(); // AutoTaskBean 中有一个 Object realTimeData，对realTimeData 进行判断
           //  例如: realTimeData instanceof RealTimeDataEx
           CodeInfo codeInfo = realTimeData.getCodeInfo();
           // 每只票 都会有一个双向链表，双向链表上的每一个Node就是一个订阅该票的用户
           DoubleLinked doubleLinked = getDoubleLinked(code,type);
           // PushPool 中有一个 Map<CodeInfo，DoubleLinked>
           // realTimeDataStreamToExStream 协议转换
           // 拿到发送队列，该队列是最终推送数据的队列
           CommBlockQueue<Object> queue = PushManager.getQueue();
           // 将转换后的数据构造成 QueueItem 对象
           // QueueItem = [node.getUid()+IcommEvent（更新数据）]
           queue.offer(QueueItem) // 从头结点遍历链表
        }
    }
    -----------------------------------
    -- 再接着，消费queue中的QueueItem--
    -----------------------------------
    PushManager 中开启一个线程池，执行 PushRunnable implements Runnable
    run(){
        while(true){
            Object obj = PushManager.getQueue().take();
            // 转换为 QueueItem
            if(obj instanceof QueueItem){
                QueueItem item = QueueItem.class.cast(obj);
                // 开始推送
                ClientChannel ch = item.getUid();
                ICommEvent result = item.getOutput();
                ch.write(result); // Macs向uas发送主推消息
            }
        }
    }
    -------------------------------------------
    ------------如果Channel不存在--------------
    -------------------------------------------
    // Macs中删除uid与订阅链接的关系
    ClientChannelManager.getInstance().removeClient(item.getUid());
    // ConcurrentHashMap<String,ClientChannel> uidChannelMap
    // 删除订阅
    SubscribeExt.remove(item.getUid());
    // SubscribeExt中有一个Map<String,List<AutoUnit>> list，记录着用户订阅的股票，每个AutoUnit的市场类型不一样，也就是不同类型市场的股票在一个集合
    // AutoUnit 中有一个List<NodeUnit> nodeUnits,记录着该用户订阅的某个市场的股票
    // 遍历 nodeUnits，一个NodeUnit就是该用户订阅的一只股票，对应上面，每只股票会有一个双向链表维护着
    // 在链表中是删除该 Node
    nodeUnit.getDoubleLinked().deleteNode(nodeUnit.getNode);
    // 最后从list中删掉AutoUnit
    list.remove(autoUnit)

















